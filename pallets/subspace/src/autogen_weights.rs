
//! Autogenerated weights for `pallet_subspace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-22, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ubuntu-2204`, CPU: `Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-subspace
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_subspace
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --wasm-execution=compiled
// --template
// ./.maintain/frame-weight-template.hbs
// --output
// pallets/subspace/src/autogen_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_subspace`.
pub trait WeightInfo {
	fn register() -> Weight;
	fn deregister() -> Weight;
	fn set_weights() -> Weight;
	fn add_stake() -> Weight;
	fn add_stake_multiple() -> Weight;
	fn transfer_stake() -> Weight;
	fn transfer_multiple() -> Weight;
	fn remove_stake() -> Weight;
	fn remove_stake_multiple() -> Weight;
	fn update_global() -> Weight;
	fn add_profit_shares() -> Weight;
	fn add_global_proposal() -> Weight;
	fn vote_proposal() -> Weight;
	fn add_subnet_proposal() -> Weight;
}

/// Weights for `pallet_subspace` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetNames` (r:11 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:12 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThresholdSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteThresholdSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteModeSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:1 w:1)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:0)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:0)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:1 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:0 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6577`
		//  Estimated: `37267`
		// Minimum execution time: 763_853_000 picoseconds.
		Weight::from_parts(864_069_000, 37267)
			.saturating_add(T::DbWeight::get().reads(66_u64))
			.saturating_add(T::DbWeight::get().writes(34_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:1 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:1 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:1 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:0 w:1)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThresholdSubnet` (r:0 w:1)
	/// Proof: `SubspaceModule::VoteThresholdSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeSubnet` (r:0 w:1)
	/// Proof: `SubspaceModule::VoteModeSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::PendingDeregisterUids` (r:0 w:1)
	/// Proof: `SubspaceModule::PendingDeregisterUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:0 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:0 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetEmission` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6928`
		//  Estimated: `12868`
		// Minimum execution time: 490_440_000 picoseconds.
		Weight::from_parts(585_671_000, 12868)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(36_u64))
	}
	/// Storage: `SubspaceModule::Stake` (r:1 w:0)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:10 w:0)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:1 w:0)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:0 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3537`
		//  Estimated: `29277`
		// Minimum execution time: 175_341_000 picoseconds.
		Weight::from_parts(198_698_000, 29277)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3751`
		//  Estimated: `7216`
		// Minimum execution time: 159_881_000 picoseconds.
		Weight::from_parts(162_202_000, 7216)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6169`
		//  Estimated: `31909`
		// Minimum execution time: 940_081_000 picoseconds.
		Weight::from_parts(1_004_062_000, 31909)
			.saturating_add(T::DbWeight::get().reads(33_u64))
			.saturating_add(T::DbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:2 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:2)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3965`
		//  Estimated: `9905`
		// Minimum execution time: 271_320_000 picoseconds.
		Weight::from_parts(327_145_000, 9905)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `System::Account` (r:11 w:11)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn transfer_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12351`
		//  Estimated: `29359`
		// Minimum execution time: 639_999_000 picoseconds.
		Weight::from_parts(713_188_000, 29359)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3751`
		//  Estimated: `7216`
		// Minimum execution time: 161_693_000 picoseconds.
		Weight::from_parts(174_620_000, 7216)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6447`
		//  Estimated: `32187`
		// Minimum execution time: 997_992_000 picoseconds.
		Weight::from_parts(1_074_859_000, 32187)
			.saturating_add(T::DbWeight::get().reads(33_u64))
			.saturating_add(T::DbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:1)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:1)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:1)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:1)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:1)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:1)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_global() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1170`
		//  Estimated: `2655`
		// Minimum execution time: 101_066_000 picoseconds.
		Weight::from_parts(105_519_000, 2655)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `SubspaceModule::N` (r:12 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:11 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ProfitShares` (r:0 w:1)
	/// Proof: `SubspaceModule::ProfitShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_profit_shares() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3435`
		//  Estimated: `34125`
		// Minimum execution time: 137_006_000 picoseconds.
		Weight::from_parts(156_469_000, 34125)
			.saturating_add(T::DbWeight::get().reads(23_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:0)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:0)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Proposals` (r:3 w:1)
	/// Proof: `SubspaceModule::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Voter2Info` (r:1 w:1)
	/// Proof: `SubspaceModule::Voter2Info` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:10 w:0)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:11 w:0)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_global_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4688`
		//  Estimated: `32903`
		// Minimum execution time: 221_253_000 picoseconds.
		Weight::from_parts(232_456_000, 32903)
			.saturating_add(T::DbWeight::get().reads(40_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::Proposals` (r:1 w:1)
	/// Proof: `SubspaceModule::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Voter2Info` (r:1 w:1)
	/// Proof: `SubspaceModule::Voter2Info` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:11 w:0)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:12 w:0)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4236`
		//  Estimated: `34926`
		// Minimum execution time: 168_478_000 picoseconds.
		Weight::from_parts(170_823_000, 34926)
			.saturating_add(T::DbWeight::get().reads(26_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThresholdSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteThresholdSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteModeSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:1 w:1)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Proposals` (r:3 w:1)
	/// Proof: `SubspaceModule::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Voter2Info` (r:1 w:1)
	/// Proof: `SubspaceModule::Voter2Info` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:0)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:0)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:0)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:0)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3656`
		//  Estimated: `12071`
		// Minimum execution time: 334_829_000 picoseconds.
		Weight::from_parts(354_705_000, 12071)
			.saturating_add(T::DbWeight::get().reads(36_u64))
			.saturating_add(T::DbWeight::get().writes(18_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetNames` (r:11 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:12 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThresholdSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteThresholdSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteModeSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:1 w:1)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:0)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:0)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:1 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:0 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6577`
		//  Estimated: `37267`
		// Minimum execution time: 763_853_000 picoseconds.
		Weight::from_parts(864_069_000, 37267)
			.saturating_add(RocksDbWeight::get().reads(66_u64))
			.saturating_add(RocksDbWeight::get().writes(34_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:1 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:1 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:1 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:0 w:1)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThresholdSubnet` (r:0 w:1)
	/// Proof: `SubspaceModule::VoteThresholdSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeSubnet` (r:0 w:1)
	/// Proof: `SubspaceModule::VoteModeSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::PendingDeregisterUids` (r:0 w:1)
	/// Proof: `SubspaceModule::PendingDeregisterUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:0 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:0 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetEmission` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6928`
		//  Estimated: `12868`
		// Minimum execution time: 490_440_000 picoseconds.
		Weight::from_parts(585_671_000, 12868)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(36_u64))
	}
	/// Storage: `SubspaceModule::Stake` (r:1 w:0)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:10 w:0)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:1 w:0)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:0 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3537`
		//  Estimated: `29277`
		// Minimum execution time: 175_341_000 picoseconds.
		Weight::from_parts(198_698_000, 29277)
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3751`
		//  Estimated: `7216`
		// Minimum execution time: 159_881_000 picoseconds.
		Weight::from_parts(162_202_000, 7216)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6169`
		//  Estimated: `31909`
		// Minimum execution time: 940_081_000 picoseconds.
		Weight::from_parts(1_004_062_000, 31909)
			.saturating_add(RocksDbWeight::get().reads(33_u64))
			.saturating_add(RocksDbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:2 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:2)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3965`
		//  Estimated: `9905`
		// Minimum execution time: 271_320_000 picoseconds.
		Weight::from_parts(327_145_000, 9905)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `System::Account` (r:11 w:11)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn transfer_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12351`
		//  Estimated: `29359`
		// Minimum execution time: 639_999_000 picoseconds.
		Weight::from_parts(713_188_000, 29359)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3751`
		//  Estimated: `7216`
		// Minimum execution time: 161_693_000 picoseconds.
		Weight::from_parts(174_620_000, 7216)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6447`
		//  Estimated: `32187`
		// Minimum execution time: 997_992_000 picoseconds.
		Weight::from_parts(1_074_859_000, 32187)
			.saturating_add(RocksDbWeight::get().reads(33_u64))
			.saturating_add(RocksDbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:1)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:1)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:1)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:1)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:1)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:1)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_global() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1170`
		//  Estimated: `2655`
		// Minimum execution time: 101_066_000 picoseconds.
		Weight::from_parts(105_519_000, 2655)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	/// Storage: `SubspaceModule::N` (r:12 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:11 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ProfitShares` (r:0 w:1)
	/// Proof: `SubspaceModule::ProfitShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_profit_shares() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3435`
		//  Estimated: `34125`
		// Minimum execution time: 137_006_000 picoseconds.
		Weight::from_parts(156_469_000, 34125)
			.saturating_add(RocksDbWeight::get().reads(23_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:0)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:0)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Proposals` (r:3 w:1)
	/// Proof: `SubspaceModule::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Voter2Info` (r:1 w:1)
	/// Proof: `SubspaceModule::Voter2Info` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:10 w:0)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:11 w:0)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_global_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4688`
		//  Estimated: `32903`
		// Minimum execution time: 221_253_000 picoseconds.
		Weight::from_parts(232_456_000, 32903)
			.saturating_add(RocksDbWeight::get().reads(40_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::Proposals` (r:1 w:1)
	/// Proof: `SubspaceModule::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Voter2Info` (r:1 w:1)
	/// Proof: `SubspaceModule::Voter2Info` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:11 w:0)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:12 w:0)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4236`
		//  Estimated: `34926`
		// Minimum execution time: 168_478_000 picoseconds.
		Weight::from_parts(170_823_000, 34926)
			.saturating_add(RocksDbWeight::get().reads(26_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:1 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThresholdSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteThresholdSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeSubnet` (r:1 w:1)
	/// Proof: `SubspaceModule::VoteModeSubnet` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SelfVote` (r:1 w:1)
	/// Proof: `SubspaceModule::SelfVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Proposals` (r:3 w:1)
	/// Proof: `SubspaceModule::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Voter2Info` (r:1 w:1)
	/// Proof: `SubspaceModule::Voter2Info` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:0)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxProposals` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxProposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:1 w:0)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::GlobalVoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::GlobalVoteThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteModeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteModeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BurnRate` (r:1 w:0)
	/// Proof: `SubspaceModule::BurnRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::MinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStakeGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MinStakeGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:0)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_subnet_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3656`
		//  Estimated: `12071`
		// Minimum execution time: 334_829_000 picoseconds.
		Weight::from_parts(354_705_000, 12071)
			.saturating_add(RocksDbWeight::get().reads(36_u64))
			.saturating_add(RocksDbWeight::get().writes(18_u64))
	}
}